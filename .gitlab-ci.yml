default:
  image: rust:latest
  before_script:
    - apt-get update
    - apt-get -y upgrade

variables:
  DOCKER_DRIVER: overlay2
  CI_REGISTRY: registry.gitlab.com
  CI_REGISTRY_IMAGE: node
  CI_REGISTRY_GROUP: masq.ai
  SAST_GOSEC_LEVEL: 3

cache:
  key: $CI_COMMIT_SHORT_SHA-$ARCH
  paths:
    - node
    - masq
    - dns_utility
    - port_exposer

stages:
  - build
  - docker-build
  - docker-push
  - security
  - test

.docker:
  image: docker:stable
  stage: docker-build
  services:
    - docker:18.09-dind
  variables:
    IMAGE: $CI_REGISTRY/$CI_REGISTRY_GROUP/$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://localhost:2375
  before_script: 
    - apk update
    - apk upgrade
    - apk add python3 py3-pip curl zip jq git 
    - pip3 install awscli
    - apk add --virtual build-dependencies build-base gcc wget

.test: 
  script:
    - cd $BUILD_DIR/
    - cargo test --verbose --target=$ARCH
  allow_failure: true

.dependency:
  stage: security
  image: iceyec/cargo-audit
  allow_failure: true
  tags: []
  before_script: []
  cache: {}
  dependencies: []
  script:
    - cd $BUILD_DIR/
    - cargo audit 
    # - cargo audit --format=json > gl-dependency-scanning-report.json
  artifacts:
    paths: [gl-dependency-scanning-report.json]

.build:
  script:
    - cd $CI_PROJECT_DIR
    - rustup target add $ARCH
    - cargo build --manifest-path=node/Cargo.toml --release --target $ARCH
    - cargo build --manifest-path=masq/Cargo.toml --release --target $ARCH
    - cargo build --manifest-path=dns_utility/Cargo.toml --release --target $ARCH
    - cargo build --manifest-path=port_exposer/Cargo.toml --release --target $ARCH
    - aws s3 sync node/target/x86_64-apple-darwin/release/ s3://$S3_BUCKET/$ARCH/
    - aws s3 sync dns_utility/target/x86_64-apple-darwin/release/  s3://$S3_BUCKET/$ARCH/
    - aws s3 sync port_exposer/target/x86_64-apple-darwin/release/  s3://$S3_BUCKET/$ARCH/

build-x86_64-darwin:
  image: registry.gitlab.com/neetkoins/masq/cross-builder/osx
  stage: build
  variables: 
    ARCH: x86_64-apple-darwin
    LIBZ_SYS_STATIC: 1
    SQLITE_STATIC: 1
    OPENSSL_STATIC: 1
    OPENSSL_DIR: /usr/local/osxcross/dl/target/SDK/MacOSX10.10.sdk/usr/include/openssl
    LIBSODIUM: libsodium-1.0.18
    SODIUM_LIB_DIR: /opt/libsodium/lib
    SODIUM_INC_DIR: /opt/libsodium/include
    CC: o64-clang
    CXX: o64-clang++
  before_script:
    - export PATH=$PATH:/usr/local/osxcross/dl/target/bin
    - apt-get update 
    - apt-get install -y python3 python3-pip zip groff less bash curl git 
    - pip3 install awscli
    - curl -fo- https://download.libsodium.org/libsodium/releases/${LIBSODIUM}.tar.gz | tar zxf - 
    - cd ${LIBSODIUM} 
    - ./configure --prefix=/opt/libsodium --host=$ARCH --enable-shared=no 
    - make -j4 && 
    - make install
  extends: .build

# aarch64-apple-darwin:
#   image: registry.gitlab.com/neetkoins/masq/cross-builder/osx
#   stage: build
#   variables: 
#     ARCH: aarch64-apple-darwin
#     LIBZ_SYS_STATIC: 1
#     SQLITE_STATIC: 1
#     OPENSSL_STATIC: 1
#     OPENSSL_DIR: /usr/local/osxcross/dl/target/SDK/MacOSX10.10.sdk/usr/include/openssl
#     LIBSODIUM: libsodium-1.0.18
#     SODIUM_LIB_DIR: /opt/libsodium/lib
#     SODIUM_INC_DIR: /opt/libsodium/include
#     CC: oa64-clang
#     CXX: oa64-clang++
#   extends: .build

x86_64-pc-windows-gnu:
  image: rustembedded/cross:x86_64-pc-windows-gnu
  stage: build
  variables: 
    ARCH: x86_64-pc-windows-gnu
    LIBZ_SYS_STATIC: 1
    SQLITE_STATIC: 1
    OPENSSL_STATIC: 1
  extends: .build

linux:
  stage: docker-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE ./
    - docker push $IMAGE
  extends: .docker

aws-ecr:
  stage: docker-push
  variables:
    BUILD_IMAGE: $CI_REGISTRY/$CI_REGISTRY_GROUP/$CI_REGISTRY_IMAGE:cloud
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE 
    - docker tag $IMAGE $BUILD_IMAGE
    - docker push $BUILD_IMAGE
    - docker tag $BUILD_IMAGE $AWS_ECR_REPO:latest
    - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_REPO
    - docker push $AWS_ECR_REPO
  extends: .docker
  needs: 
    - linux

include:
  - template: SAST.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml

dep-scan-node: 
  stage: security
  variables: 
    BUILD_DIR: $CI_PROJECT_DIR/node/
  extends: .dependency

dep-scan-masq:
  stage: security
  variables: 
    BUILD_DIR: $CI_PROJECT_DIR/masq/
  extends: .dependency

dep-scan-dns_utility: 
  stage: security
  variables: 
    BUILD_DIR: $CI_PROJECT_DIR/dns_utility/
  extends: .dependency

dep-scan-port_exposer: 
  stage: security
  variables: 
    BUILD_DIR: $CI_PROJECT_DIR/port_exposer/
  extends: .dependency

sast:
  stage: security
  artifacts:
    paths: 
      - gl-sast-report.json
    reports:
      sast: [gl-sast-report.json]

container_scanning:
  stage: security
  image: docker:stable
  variables:
    GIT_STRATEGY: fetch
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY/$CI_REGISTRY_GROUP/$CI_REGISTRY_IMAGE
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      dependency_scanning: [gl-container-scanning-report.json]
  script:
   - docker login -u $DOCKER_USER -p $DEPLOY_TOKEN $CI_REGISTRY
   - /analyzer run

default:
  image: rust:latest
  before_script:
    - apt-get update
    - apt-get -y upgrade

variables:
  DOCKER_DRIVER: overlay2
  CI_REGISTRY: registry.gitlab.com
  CI_REGISTRY_IMAGE: node
  CI_REGISTRY_GROUP: masq.ai
  SAST_GOSEC_LEVEL: 3

cache:
  key: $CI_COMMIT_SHORT_SHA-$ARCH
  paths:
    - node
    - masq
    - dns_utility
    - port_exposer

stages:
  - build
  - sync
  - docker
  - security

.docker:
  image: docker:stable
  stage: docker-build
  services:
    - docker:18.09-dind
  variables:
    IMAGE: $CI_REGISTRY/$CI_REGISTRY_GROUP/$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://localhost:2375

  variables:
    IMAGE: $CI_REGISTRY/$CI_REGISTRY_GROUP/$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://localhost:2375
  before_script: 
    - apk update
    - apk upgrade
    - apk add python3 py3-pip curl zip jq git 
    - pip3 install awscli
    - apk add --virtual build-dependencies build-base gcc wget

.test:
  script:
    - ./multinode_integration_tests/ci/all.sh
  allow_failure: true

.dependency:
  stage: security
  image: iceyec/cargo-audit
  allow_failure: true
  tags: []
  before_script: []
  cache: {}
  dependencies: []
  script:
    - cd $BUILD_DIR/
    - cargo audit --format=json > gl-dependency-scanning-report.json
  artifacts:
    paths: [gl-dependency-scanning-report.json]

.build:
  artifacts:
    paths:
      - node
      - masq
      - dns_utility
      - port_exposer
    expire_in: 1 week
  script:
    - export PATH=$PATH:$HOME/.cargo/bin
    - cd $CI_PROJECT_DIR
    - rustup target add $ARCH
    - cargo build --manifest-path=node/Cargo.toml --release --target $ARCH
    - cargo build --manifest-path=masq/Cargo.toml --release --target $ARCH
    - cargo build --manifest-path=dns_utility/Cargo.toml --release --target $ARCH 
    - cargo build --manifest-path=port_exposer/Cargo.toml --release --target $ARCH

.s3:
  image: alpine:latest
  artifacts:
    paths:
      - node
      - masq
      - dns_utility
      - port_exposer
    expire_in: 1 week
  script: 
    - aws s3 sync node/target/$ARCH/release/ s3://$S3_BUCKET/Builds/$ARCH/$RELEASE/ --exclude ".fingerprint/*"
    - aws s3 sync dns_utility/target/$ARCH/release/  s3://$S3_BUCKET/Builds/$ARCH/$RELEASE/ --exclude ".fingerprint/*"
    - aws s3 sync port_exposer/target/$ARCH/release/  s3://$S3_BUCKET/Builds/$ARCH/$RELEASE/ --exclude ".fingerprint/*"


x86_64-linux-gnu:build:
  image: rust:buster
  variables:
    ARCH: x86_64-unknown-linux-gnu
  stage: build
  before_script:
    - apt-get update 
    - apt-get upgrade -y
    - apt-get install -y python3 python3-pip zip
    - pip3 install awscli
  script:
    - cd $CI_PROJECT_DIR
    - rustup update
    - cargo build --manifest-path=node/Cargo.toml --release 
    - cargo build --manifest-path=masq/Cargo.toml --release 
    - cargo build --manifest-path=dns_utility/Cargo.toml --release 
    - cargo build --manifest-path=port_exposer/Cargo.toml --release 

x86_64-linux:s3:
  stage: sync
  variables:
    ARCH: x86_64-unknown-linux-gnu
    RELEASE: latest
  needs: ["x86_64-linux-gnu:build"]
  extends: .s3

x86_64-linux-stable:s3:
  stage: sync
  variables:
    ARCH: x86_64-unknown-linux-gnu
    RELEASE: stable
  only:
    - master
  needs:
    - job: x86_64-linux-gnu:build
      artifacts: true
  extends: .s3

x86_64-windows:build:
  image: registry.gitlab.com/masq.ai/cross-builder/windows
  stage: build
  services:
    - docker:18.09-dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    ARCH: x86_64-pc-windows-gnu
    LIBSODIUM: libsodium-1.0.18
    SODIUM_LIB_DIR: /opt/libsodium/lib
    SODIUM_INC_DIR: /opt/libsodium/include
    LIBZ_SYS_STATIC: 1
    SQLITE_STATIC: 1
    OPENSSL_STATIC: 1
  before_script:
   - apk update 
   - apk upgrade 
   - apk add python3 py3-pip zip
   - pip3 install awscli
  extends: .build

x86_64-windows:s3:
  stage: sync
  variables:
    ARCH: x86_64-pc-windows-gnu
    RELEASE: latest
  needs:
    - job: x86_64-windows:build
      artifacts: true
  extends: .s3

x86_64-windows-stable:s3:
  stage: sync
  variables:
    ARCH: x86_64-pc-windows-gnu
    RELEASE: stable
  needs:
    - job: x86_64-windows:build
      artifacts: true
  only:
    - master
  extends: .s3

x86_64-apple:build:
  image: registry.gitlab.com/masq.ai/cross-builder/osx
  stage: build
  variables: 
    ARCH: x86_64-apple-darwin
    LIBZ_SYS_STATIC: 1
    SQLITE_STATIC: 1
    OPENSSL_STATIC: 1
    OPENSSL_DIR: /usr/local/osxcross/dl/target/SDK/MacOSX10.10.sdk/usr/include/openssl
    LIBSODIUM: libsodium-1.0.18
    SODIUM_LIB_DIR: /opt/libsodium/lib
    SODIUM_INC_DIR: /opt/libsodium/include
    CC: o64-clang
    CXX: o64-clang++
  before_script:
    - export PATH=$PATH:/usr/local/osxcross/dl/target/bin
    - apt-get update 
    - apt-get install -y python3 python3-pip zip groff less bash curl git 
    - pip3 install awscli
    - curl -fo- https://download.libsodium.org/libsodium/releases/${LIBSODIUM}.tar.gz | tar zxf - 
    - cd ${LIBSODIUM} 
    - ./configure --prefix=/opt/libsodium --host=$ARCH --enable-shared=no 
    - make -j4 && 
    - make install
  extends: .build

x86_64-apple:s3:
  stage: sync
  variables:
    ARCH: x86_64-apple-darwin
    RELEASE: latest
  needs:
    - job: x86_64-apple:build
      artifacts: true
  extends: .s3

x86_64-apple-stable:s3:
  stage: sync
  variables:
    ARCH: x86_64-apple-darwin
    RELEASE: stable
  needs:
    - job: x86_64-apple:build
      artifacts: true
  only:
    - master
  extends: .s3

aarch64-apple:build:
  image: registry.gitlab.com/masq.ai/cross-builder/osx
  stage: build
  variables: 
    ARCH: aarch64-apple-darwin
    LIBZ_SYS_STATIC: 1
    SQLITE_STATIC: 1
    OPENSSL_STATIC: 1
    OPENSSL_DIR: /usr/local/osxcross/dl/target/SDK/MacOSX10.10.sdk/usr/include/openssl
    LIBSODIUM: libsodium-1.0.18
    SODIUM_LIB_DIR: /opt/libsodium/lib
    SODIUM_INC_DIR: /opt/libsodium/include
    CC: o64-clang
    CXX: o64-clang++
  before_script:
    - export PATH=$PATH:/usr/local/osxcross/dl/target/bin
    - apt-get update 
    - apt-get install -y python3 python3-pip zip groff less bash curl git 
    - pip3 install awscli
    - curl -fo- https://download.libsodium.org/libsodium/releases/${LIBSODIUM}.tar.gz | tar zxf - 
    - cd ${LIBSODIUM} 
    - ./configure --prefix=/opt/libsodium --host=$ARCH --enable-shared=no 
    - make -j4 && 
    - make install
  extends: .build

aarch64-apple:s3:
  image: alpine:latest
  stage: sync
  variables:
    ARCH: aarch64-apple-darwin
    RELEASE: latest
  needs:
    - job: aarch64-apple:build
      artifacts: true
  extends: .s3

aarch64-apple-stable:s3:
  image: alpine:latest
  stage: sync
  variables:
    ARCH: aarch64-apple-darwin
    RELEASE: stable
  needs:
    - job: aarch64-apple:build
      artifacts: true
  only:
    - master
  extends: .s3

cloud:
  stage: docker
  variables:
    BUILD_IMAGE: $CI_REGISTRY/$CI_REGISTRY_GROUP/$CI_REGISTRY_IMAGE:cloud
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE ./
    - docker tag $IMAGE $BUILD_IMAGE
    - docker tag $BUILD_IMAGE $AWS_ECR_REPO:latest
    - docker push $IMAGE
    - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_REPO
    - docker push $AWS_ECR_REPO
  extends: .docker

include:
  - template: SAST.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml

sast:
  stage: security
  artifacts:
    paths: 
      - gl-sast-report.json
    reports:
      sast: [gl-sast-report.json]

container_scanning_new:
  stage: security

container_scanning:
  stage: security
  image: docker:stable
  variables:
    GIT_STRATEGY: fetch
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY/$CI_REGISTRY_GROUP/$CI_REGISTRY_IMAGE
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      dependency_scanning: [gl-container-scanning-report.json]
  script:
   - docker login -u $DOCKER_USER -p $DEPLOY_TOKEN $CI_REGISTRY
   - /analyzer run
